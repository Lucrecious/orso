Roadmap to 0.5v
- Fix parsing recursive issue (error for parsing is bad right now)
- structs
    - anonymous and named
    - works with @run
    - allow structs with default values
    - allow structs with compile-time parameters
    - allow structs for compound arithmetic if elligible
    - allow struct initialization with names or with order
        - add errors for names: that go backwards in the field list
- strings
    - implemented in core, with regular string syntactic sugar
    - warning that only memory is compared
- Make sure main works properly
    - main function is not properly type checked
    - main is always () -> void. by default programs ends in 0 error code, unless 'exit(n: num)' is used with another code
    - add globals for program arguments
- allow default values for functions
    - allow labelled as well as empty call arguments
    - errors for weird orders (labels that go backwards in args)
- allow for compile-time call arguments
- Make better errors for static analyzer
    - basically, do not output errors that only result from a propogating error (like if a type is invalid don't error just keep going)
    - cover all errors
- type list exposed as a module
- custom modules (multifile programs)
- ffi but only for native
- compiler as module
- switch expression
    - keep it simple
- cmd with proper commands
- update tests to use a custom assert instead or printing

#Roadmap to 1.0v:
- fuzz testing
- all error tested
- switch expression
    - add some optimization strategies 
- strings
    - they compare contents not ptrs
    - string library
- ffi for interpreter using libffi
- compile-time macros
    - @if, @assert, @inline
- custom replacing macros (ast only, function-like)
- expose ast to language as module
- allow custom compile-time directives 
- finish cmd commands
    - with build templates
