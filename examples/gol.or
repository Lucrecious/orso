rl :: @load "./vendor/raylib.or";

# alias for pair of floats
vec2f_t :: [2]f32;

grid_size :: [2]int.{32, 32};
cell_size :: [2]int.{16, 16};

window_size :: grid_size * cell_size;

delta :: 0.15;

main :: () -> void {
    board_ := [32][32]bool.{};
    buffer_ := [32][32]bool.{};

    board := &board_;
    buffer := &buffer_;

    clear_board :: (board: &[32][32]bool) -> void {
        for i := 0; i < len(*board); ++i do
            for j := 0; j < len(board[0]); ++j {
                board[i][j] = false;
            };
    };

    mark  :: (board: &[32][32]bool, pos: [2]int, with := true) -> void {
        if pos[0] >= 0 and pos[0] < len(*board) and pos[1] >= 0 and pos[1] < len(board[0]) {
            board[pos[0]][pos[1]] = with;
        };
    };

    is_marked :: (board: &[32][32]bool, pos: [2]int) -> bool {
        while pos[0] < 0 do pos[0] += len(*board);
        while pos[1] < 0 do pos[1] += len(*board);

        pos[0] %= len(*board);
        pos[1] %= len(board[0]);

        marked := board[pos[0]][pos[1]];
        return marked;
    };

    count_neighbors :: (board: &[32][32]bool, x: int, y: int) -> int {
        nc := 0;

        for sx := x-1; sx < x+2; ++sx do
            for sy := y-1; sy < y+2; ++sy {
                if sx == x and sy == y then continue;
                nc += if is_marked(board, .{sx, sy}) then 1 else 0;
            };
        
        return nc;
    };

    update_board :: (dst: &[32][32]bool, src: &[32][32]bool) -> void {
        for x := 0; x < len(*src); ++x do
            for y := 0; y < len(src[0]); ++y {
                nc := count_neighbors(src, x, y);
                alive := src[x][y];
                if alive and nc < 2 then
                    dst[x][y] = false
                else if alive and (nc == 2 or nc == 3) then
                    dst[x][y] = true
                else if alive and nc > 3 then
                    dst[x][y] = false
                else if not alive and nc == 3 then
                    dst[x][y] = true;
            };
    };

    rl.init_window(window_size[0], window_size[1], "Game of Life");

    rl.set_target_fps(60);

    update := false;

    sec_left := delta;

    while not rl.window_should_close() {
        rl.begin_drawing();

            rl.clear_background(rl.raywhite);

            alive_count := 0;

            for i := 0; i < grid_size[0]; ++i do
                for j := 0; j < grid_size[1]; ++j {
                    alive_count += if is_marked(board, .{i, j}) then 1 else 0;

                    color := if board[i][j] then
                        rl.black
                    else
                        if i % 2 == j % 2 then
                            rl.white
                        else
                            rl.raywhite;

                    rl.draw_rectangle(.{i, j}*cell_size, cell_size, color);
                };
            
            if rl.is_mouse_button_pressed(rl.mouse_button_left) {
                mouse_pos := rl.get_mouse_position()/cell_size;
                marked := board[mouse_pos[0]][mouse_pos[1]];
                mark(board, mouse_pos, not marked);
                
                update = false;
                sec_left = delta;
            };

            if rl.is_mouse_button_pressed(rl.mouse_button_right) {
                update = not update;
                if not update then
                    sec_left = delta;
            };

            if update {
                if sec_left < 0 {
                    sec_left = delta;

                    tmp := buffer;
                    buffer = board;
                    board = tmp;

                    clear_board(board);
                    update_board(board, buffer);
                };

                sec_left -= rl.get_frame_time();
            };

        rl.end_drawing();
    };

    rl.close_window();
};