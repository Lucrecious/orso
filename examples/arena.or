region_t :: struct {
    next := (&region_t).{};
    count := 0sz;
    capacity := 0sz;
    data := (&void).{};
};

arena_t :: struct {
    begin := (&region_t).{};
    end := (&region_t).{};
};

new_region :: (size_words: size_t) -> &region_t {
    size_bytes := sizeof(region_t) + sizeof(u64)*size_words;
    r := mreserve(size_bytes) as &region_t;
    mmarkrw(r, size_bytes);

    r.next = .{};
    r.count = 0;
    r.capacity = size_words;
    r.data = (r as &void) + (sizeof(region_t) as ptrdiff_t);
    return r;
};

arena_alloc :: (a: &arena_t, size_bytes: size_t) -> &void {
    size := (size_bytes + sizeof(u64) - 1)/sizeof(u64);

    if a.end == (&void).{} {
        capacity := mpagesize();
        if capacity < size then capacity = size;
        a.end = new_region(capacity);
        a.begin = a.end;
    };

    while a.end.count + size > a.end.capacity and a.end.next != (&void).{} do
        a.end = a.end.next;

    if a.end.count + size > a.end.capacity {
        capacity := mpagesize();
        if capacity < size then capacity = size;
        a.end.next = new_region(capacity);
        a.end = a.end.next;
    };

    result := a.end.data + (a.end.count as ptrdiff_t);
    a.end.count += size;
    return result;
};

main :: () -> void {
    arena := arena_t.{};

    x := arena_alloc(&arena, sizeof(int)) as &int;
    *x = 10;

    printint(*x);
    println();

    y := arena_alloc(&arena, sizeof(f64)) as &f64;
    *y = 64.5;

    printf64(*y);
    println();

};
