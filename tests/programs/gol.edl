do:gol {
    width :: @run readint();
    height :: @run readint();

    if width*height == 0 {
        printint(0);
        println();
        break:gol 1;
    };

    fill :: (arr: &[height][width]!u, value: u) -> void {
        for w := 0; w < width; ++w {
            for h := 0; h < height; ++h {
                (*arr)[w][h] = value;
            };
        };
    };

    board_: [height][width]u8;
    buffer_ := board_;

    board := &board_;
    buffer := &buffer_;

    
    printint(1);
    println();
    println();

    initx := readint();
    inity := readint();

    until initx*inity == 0 {
        x := initx - 1;
        y := inity - 1;

        if x < 0 or y < 0 or x >= width or y >= height {
            printint(0);
            println();
        } else {
            (*board)[y][x] = 1;
            printint(1);
            println();
        };
        println();

        initx = readint();
        inity = readint();
    };
    println();

    render_board :: (board: &[height][width]u8) -> void {
        for h := 0; h < height; ++h {
            for w := 0; w < width; ++w {
                tile := (*board)[h][w] as int;
                printint(tile);
            };
            println();
        };

        return;
    };

    render_board(board);

    neighbors :: (board: &[height][width]u8, x: int, y: int) -> int {
        sum := 0;

        xs := x - 1;
        ys := y - 1;

        for yi := 0; yi < 3; ++yi {
            for xi := 0; xi < 3; ++xi {
                xn := xs + xi;
                yn := ys + yi;

                if xn == x and yn == y then continue;
                if xn < 0 or yn < 0 or xn >= width or yn >= height then continue;

                sum += (*board)[yn][xn] as int;
            };
        };

        return sum;
    };

    while readint() != 0 {
        fill(buffer, 0);

        for y := 0; y < height; ++y {
            for x := 0; x < width; ++x {
                n := neighbors(board, x, y);
                alive := (*board)[y][x];

                // death by underpopulation
                if alive > 0 and n < 2 then
                    (*buffer)[y][x] = 0
                
                // lives to next generation
                else if alive > 0 and (n == 2 or n == 3) then
                    (*buffer)[y][x] = 1

                // death by overpopulation
                else if alive > 0 and n > 3 then
                    (*buffer)[y][x] = 0

                // reproduction
                else if alive < 1 and n == 3 then
                    (*buffer)[y][x] = 1;
            };
        };

        tmp := board;
        board = buffer;
        buffer = tmp;
        render_board(board);
    };

    0;
}

