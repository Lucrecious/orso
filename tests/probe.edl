// array_t :: struct(u: type) {
//     items: &[]u;
//     count := 0;
//     capacity := 0;
// };

// push :: (arr: array_t(~u), item: u, arena := global_arena) -> int {
//     if count >= arr.capacity {
//         new_capacity := if arr.capacity == 0 then 8 else arr.capacity*2;
//         arr.items = realloc(arena, arr.items, sizeof([capacity]u), sizeof([new_capacity]u)) as &[]u;
//         arr.capacity = new_capacity;
//     };

//     array.items[count] = item;
//     count += 1;
//     return count-1;
// };


// {
//     vec2f :: [2]f32;

//     arr: [10]vec2f;

//     // x := arr[0];

//     arr[0][0] = 2;
//     // x[0] = 5;

//     arr[0][0];
// }

{
    x := 1;
    y := 2;

    xp := &x;
    yp := &y;

    *xp = 5;;

    *yp = 6;

    *xp + *yp;
}

