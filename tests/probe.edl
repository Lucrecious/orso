// Implementation notes for inferred typing for generics:
// - front end is static analyzer... i shouldn't have to change *anything* in the code gen
// - first thing i wanted to work
// {
//     x: ~u = 10;
//     u == int;
// }
// ~u is declaration syntax for inferred types, it can only be used inside a type annotation context which
// is only available when declaring variables.
// then the variable name itself is a regular *constant* you can use throughout the rest of the context like 
// unfortunately, it adds "special" syntax, but i think it's worth t, as the altnerative might look like this:
// x: u: type = 10;
// which *might* be possible to parse (how do i properly differentiate during parsing between a regular declaration and an inffered one),
// but then that means, essentially, that declarations are also expression, which i want to avoid.
// also, it would be inconvenient to use when i add in generic structs... if i can describe an array like "array(int)"
// thien it would need to look something like this...
// x: array(u: type) = .[];
// it's a little inconvenient, a syntax like this is a little more terse and can convey *better* meaning
// x: array(~u) = .[];
// 
// the other thing is that this isn't like a regular declaration... it's an *inferred* declaration. it's not simply
// creating a variable. it's a value that gets inferred. and types are the only values that can be inferred.
// the next thing i'm trying to solve is this:
//
//
// {
//     i := 0;
//     x: &~u = &i;
//     u == int;
// }
// 
// this involves pattern matching... and is substantially more difficult to analyze
// i realize that this is similar to parsing actually in the sense that i have a valid structure
// i want to check against. i.e. &~u is ptr of inferred type means i want to match a pointer and capture
// its inner type as u.

//

// after thinking about it more, i realize that this functionality is different than what my end goal is
// which is to use this to create "inferred function defintiions"
// my idea is to make a "compile-time" constant type called an "inferred function definiton" which monomorphises 
// to a concrete type when called
// the thing with that is that, inferred type decls only really make sense when they are declared as parameters
// in a function call. as part of regular variable definitions, it's different functionality. One is simply inferring
// the type of the expression and using pattern matching to give the implicit type a name, and the other is making a 
// new and unique copy of a function and trying to resolve its ast given the arguments
// so now i'm moving to solve this:
// {
//     self :: (a: ~u) -> u {
//         return a;
//     };

//     item := self(1);
//     typeof(item) == int;
// }
// a simple function that requires the definition to be inferred from the function arguments
// i think that while an inferred function definition can be passed around in mutable variables,
// they can only be called from a constant time value so the definition can be inferred.
// {
//     add :: (a: &~u, b: &u) -> u {
//         return *a + *b;
//     };

//     x := 1;
//     y := 1;
//     add(&x, &y);
// }
// this now works somewhat fragily but it does and allows me to write this stuff now:
// {
//     // function that makes an array given an inferred type!
//     make_arr :: (_: ~u, size: size_t) -> &u {
        
//         // use the inferred type name like a regular declaration
//         arr := &u << mreserve(size);
//         mmarkrw(arr, size);

//         return arr;
//     };

//     // make array of 10 u64s
//     arru := make_arr(0u64, 8*10);

//     // make array of 10 bools
//     arrb := make_arr(false, 1*10);

//     printint(if typeof(arru) == &u64 then 1 else 0);
//     printint(if typeof(arrb) == &bool then 1 else 0);
//     println();

//     // yes it prints 11

//     // and also a generic array at
//     at :: (arr: &~u, in: ptrdiff_t) -> &u {
//         return arr + in;
//     };

//     *at(arru, 0) = 10;
//     *at(arrb, 5) = true;

//     if *at(arru, 0) == 10 then printint(1) else printint(0);
//     if *at(arrb, 5) == true then printint(1) else printint(0);
//     println();
// }
{
    pd_t :: ptrdiff_t;

    make_arr :: (init: ~u, count: size_t) -> &u {
        arr := mreserve(sizeof(u)*count) as &u;
        mmarkrw(arr, sizeof(u)*count);

        c := 0sz;
        while c < count {
            *at(arr, c as pd_t) = init;
            c = c + 1;
        };

        return arr;
    };

    at :: (arr: &~u, in: ptrdiff_t) -> &u {
        return arr + in;
    };

    arri := make_arr(2, 10);

    *at(arri, 3);
}

