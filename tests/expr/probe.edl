{
    toi :: (ptr: &void) -> int {
        iptr := &int << ptr;
        return *iptr;
    };

    x := 10;

    xp := &void << &x;

    dx := 0;
    
    if typeof(xp) == &void then toi(xp);

    dx;


    // count :: 10;

    // addall :: (ints: &int, count: size_t) -> int {
    //     c := 0pd;

    //     sum := 0;

    //     return while c < count {
    //         num := *(ints + c);
    //         c = c + 1;
    //         sum = sum + num;
    //     } then sum;
    // };

    // ints := &int << mmap(sizeof(int)*count);

    // c := 0pd;
    // while c < count {
    //     *(ints + c) = c;
    //     c = c + 1;
    // };

    // mprotect(ints, sizeof(int)*count);

    // sum := addall(ints, count);

    // munmap(ints, sizeof(int)*count);
}
