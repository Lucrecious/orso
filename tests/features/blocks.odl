main :: () -> void {
    // blocks returns last expression in block
    sum := {
        s := 1;
        // - for and while loops always have an implicit then clauses, that is its final expression value
        // - then only happens after a loop completes naturally (negative condition)
        for i := 0; i < 10; ++i {
            // - continue simply skips to evaluating increment expression, and check condition
            // which can cause loop to end naturally
            if s > 10 then continue;
            s += s;
        } then s;
    };

    printint(sum);
    println();

    sum = 0;
    for i := 0; i < 10; ++i {
        sum += i;
        // - jumping out of the block (through a break or a continue outside of local loop scope) omits the then statement
        if sum > 10 then break;
    } then sum = 0;

    printint(sum);
    println();
    
    {
        // not allowed: by default without 'break' or 'then', 'for' evaluates to void, which is
        // an invalid storage type
        s := 0;
        // sum = for i := 0; i < 10; ++i do s *= i;
        // printint(if sum == 0 then 1 else 0);
        // println();
        
        // for now, a then clause is a must if you want the expression to evaluate to anything other than nil
        s = 1;
        sum = for i := 0; i < 4; ++i do if i == 0 then continue else s *= i then s;
        printint(if sum == 6 then 1 else 0);
        println();
    };

    // regular while and untils
    {
        x := 0;
        
        // no break value
        a := while true {
            x = 5;
            break 0;
        } then x;
        printint(x);
        printint(a);
        println();

        // no break value
        a = until false {
            x = 10;
            break 0;
        } then x;
        printint(x);
        printint(a);
        println();
        
        a = while true {
            x = 5;
            break 20;
        } then x;
        printint(x);
        printint(a);
        println();

        a = until false {
            x = 10;
            break 60;
        } then x;
        printint(x);
        printint(a);
        println();

        // variables can be defined before conditions
        a = while x := 0; x < 10 {
            ++x;
        } then x;
        printint(a);
        println();

        // same with untils
        a = until x := 0; x > 10 {
            ++x;
        } then x;
        printint(a);
        println();
    };

    {

    };
};