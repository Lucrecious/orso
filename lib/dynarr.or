dynarr_t :: struct(u: type) {
    items := (&u).{};
    count := 0;
    capacity := 0;
};

push :: (arr: &dynarr_t(u), item: !u) -> void {
    if arr.count >= arr.capacity {
        new_cap := if arr.capacity == 0 then 8 else arr.capacity*2;
        arr.items = (@icall "realloc", arr.items as &void, sizeof(u)*(arr.capacity as size_t), sizeof(u)*(new_cap as size_t)) as &u;
        arr.capacity = new_cap;
    };

    *(arr.items + (arr.count as ptrdiff_t)) = item;
    ++arr.count;
};

at :: (arr: &dynarr_t(!u), index := 0) -> &u {
    if index < 0 then index = arr.count - index;
    # assert(index < arr.count);
    item := arr.items + (index as ptrdiff_t);
    return item;
};

free :: (arr: &dynarr_t(!u)) -> void {
    @icall "realloc", arr.items as &void, sizeof(u)*(arr.capacity as size_t), 0sz;
    *arr = .{};
};